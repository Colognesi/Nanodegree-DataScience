In this next part of the lesson, you'll build a backend using Flask. Because Flask is written in Python, you can use any 
Python library in your backend including pandas and scikit-learn.

In this part of the lesson, you'll practice

setting up the backend
linking the backend and the frontend together
deploying the app to a server so that the app is available from a web address
What is Flask?
Flask. A web framework takes care of all the routing needed to organize a web page so that you don't have to write the code yourself!

When you type "http://www.udacity.com" into a browser, your computer sends out a request to another computer (ie the server) 
where the Udacity website is stored. Then the Udacity server sends you the files needed to render the website in your browser. 
The Udacity computer is called a server because it "serves" you the files that you requested.

The HTTP part of the web address stands for Hypter-text Transfer Protocol. HTTP defines a standard way of sending and receiving 
messages over the internet.

When you hit enter in your browser, your computer says "get me the files for the web page at www.udacity.com": except that message 
is sent to the server with the syntax governed by HTTP. Then the server sends out the files via the protocol as well.

There needs to be some software on the server that can interpret these HTTP requests and send out the correct files. 
That's where a web framework like Flask comes into play. A framework abstracts the code for receiving requests as well as 
interpreting the requests and sending out the correct files.

Why Flask?
First and foremost, you'll be working with Flask because it is written in Python. You won't need to learn a new programming language.
Flask is also a relatively simple framework, so it's good for making a small web app.
Because Flask is written in Python, you can use Flask with any other Python library including pandas, numpy and scikit-learn. 
In this lesson, you'll be deploying a data dashboard and pandas will help get the data ready.

====================================

Using Flask in the Classroom Workspace
In the next part of the lesson, you'll see a classroom workspace. The classroom workspace already has Flask set up for you. 
So for now, all you need to do to run the Flask app is to open a Terminal and type.

python worldbank.py
That assumes you are in the default workspace directory within Terminal. That will get the server running.

Seeing your App in the Workspace
Once the server is running, open a new terminal window and type

env | grep WORK
This command will return the Linux environmental variables that contain information about your classroom workspace. 
The env command will list all the environmental variables. The | symbol is a pipe for sending output from one command to another. 
The grep command searches text, so grep WORK will search for any text containing the word WORK.

The command should return two variables:

WORKSPACEDOMAIN=udacity-student-workspaces.com
WORKSPACEID=viewc7f3319f2
Your WORKSPACEID variable will be different but the WORKSPACEDOMAIN should be the same. Now, open a new web browser window, 
and type the following in the address bar:

http://WORKSPACEID-3001.WORKSPACEDOMAIN
In this example, that would be: https://viewc7f3319f2-3001.udacity-student-workspaces.com/

DON'T FORGET TO INCLUDE -3001. You should be able to see the web app. The number 3001 represents the port for accessing your web app.

Creating New Pages
To create a new web page, you first need to specify the route in the routes.py as well as the name of the html template.

@app.route('/new-route')
def render_the_route():
    return render_template('new_route.html')
The route name, function name, and template name do not have to match; however, it's good practice to make them similar so that the code is easier to follow.

The new_route.html file must go in the templates folder. Flask automatically looks for html files in the templates folder.

What is @app.route?
To use Flask, you don't necessarily need to know what @app.route is doing. You only have to remember that the path you 
place inside of @app.route() will be the web address. And then the function you write below @app.route is used to render 
the correct html template file for the web address.

In Python, the @ symbol is used for decorators. Decorators are a shorthand way to input a function into another function. 
Take a look at this code. Python allows you to use a function as an input to another function:

def decorator(input_function):

    return input_function

def input_function():
    print("I am an input function")

decorator_example = decorator(input_function)
decorator_example()
Running this code will print the string:

I am an input function

Decorators provide a short-hand way of getting the same behavior:

def decorator(input_function):
    print("Decorator function")
    return input_function

@decorator
def input_function():
    print("I am an input function")

input_function()
This code will print out:

Decorator function
I am an input function

Instead of using a decorator function, you could get the same behavior with the following code:

input_function = decorator(input_function)
input_function()
Because @app.route() has the . symbol, there's an implication that app is a class (or an instance of a class) and route is a 
method of that class. Hence a function written underneath @app.route() is going to get passed into the route method. 
The purpose of @app.route() is to make sure the correct web address gets associated with the correct html template. 
This code

@app.route('/homepage')
def some_function()
  return render_template('index.html')
is ensuring that the web address 'www.website.com/homepage` is associated with the index.html template.

==================================

Flask with Plotly and Pandas Part 1
In this next video, you'll see an example of how to pass data from the back end to the front end of the web app. 
In the next four parts of this lesson, you'll get a sense for how data and Plotly code can be taken from the back end and, 
sent to the front end, and then used to render plots on the front end. The goal of these next few videos is to show you how the 
web template works, which you'll be using later in the final exercise.

Summary Part 1
The purpose of this section is to give you an idea of how the final web app works in terms of passing information back and forth 
between the back end and front end. The web template you'll be using at the end of the lesson will already provide the code for 
sharing information between the back and front ends. Your task will be to wrangle data and set up the plotly visualizations using Python. 
But it's important to get a sense for how the web app works.

In the video above, the data set was sent from the back end to the front end. This was accomplished by including a variable in the 
render_template() function like so:


data = data_wrangling()

@app.route('/')
@app.route('/index')
def index():
   return render_template('index.html', data_set = data)
What this code does is to first load the data using the data_wrangling function from wrangling.py. This data gets stored in a variable 
called data.

In render_template, that data is sent to the front end via a variable called data_set. Now the data is available to the front_end in the 
data_set variable.

In the index.html file, you can access the data_set variable using the following syntax:

{{ data_set }}
You can do this because Flask comes with a template engine called Jinja. Jinja also allows you to put control flow statements in your 
html using the following syntax:

{% for tuple in data_set %}
  <p>{{tuple}}</p>
{% end_for %}
The logic is:

Wrangle data in a file (aka Python module). In this case, the file is called wrangling.py. The wrangling.py has a 
function that returns the clean data.
Execute this function in routes.py to get the data in routes.py
Pass the data to the front-end (index.html file) using the render_template method.
Inside of index.html, you can access the data variable with the squiggly bracket syntax {{ }}

=============================

Flask with Plotly and Pandas Part 2
In this section, you'll see how to create a Plotly visualization on the back end and then send the information to the front end for rendering.

Summary Part 2
In the second part, a Plotly visualization was set up on the back-end inside the routes.py file using Plotly's Python library. 
The Python plotly code is a dictionary of dictionaries. The Python dictionary is then converted to a JSON format and sent to the 
front-end via the render_templates method.

Simultaneously a list of ids are created for the plots. This information is also sent to the front-end using the render_template() method.

On the front-end, the ids and visualization code (JSON code) is then used with the Plotly javascript library to render the plots.

In summary:

Python is used to set up a Plotly visualization
An id is created associated with each visualization
The Python Plotly code is converted to JSON
The ids and JSON are sent to the front end (index.html).
The front end then uses the ids, JSON, and JavaScript Plotly library to render the plots.
JavaScript or Python
You could actually do all of this with only JavaScript. You would read the data, wrangle the data, and then create the plots 
all using JavaScript; however, to do all of this in JavaScript, you'd need to learn more about JavaScript programming. Instead, 
you can use the pandas and Python skills you already have to wrangle data on the back-end.

====================================

Flask with Plotly and Pandas Part 3
Here, the screencast video shows how to make more complex visualizations in Plotly. 
This example shows a line chart containing a unique line for each country in the data set.

Summary Part 3
In part 3, the code iterated through the data set to create a visualization with multiple lines: one for each country.

The original code for a line chart with a single line was:

graph_one = [go.Scatter(
  x = data[0][1],
  y = data[0][2],
  mode = 'lines',
  name = country
)]
To make a visualization with multiple lines, graph_one will be a list of line charts. This was accomplished with the following code:

graph_one = []
for data_tuple in data:
   graph_one.append(go.Scatter(
   x = data_tuple[1],
   y = data_tuple[2],
   mode = 'lines',
   name = data_tuple[0]
))

====================================

Summary Part 4
In the last part, three more visualizations were added to the wrangling Python module. 
The wrangling included reading in the data, cleaning the data, and preparing the Plotly code. 
Each visualization's code was appended to a list called figures. These visualizations were then imported into the routes.py file. 
This figures list was sent from the back end to the front end via the render_template method. A list of ids were also sent from the 
back end to the front end.

Then on the front end (index.html), a div was created for each visualization's id. And with help from the JavaScript Plotly library, 
each visualization was rendered inside appropriate div.

Beyond a CSV file
Besides storing data in a local csv file (or text, json, etc.), you could also store the data in a database such as a SQL database.

The database could be local to your website meaning that the database file is stored on the same server as your website; alternatively, 
the database could be stored somewhere else like on a separate database server or with a cloud service like Amazon AWS.

Using a database with your web app goes beyond the scope of this introduction to web development, here are a few resources for 
using databases with Flask apps:

https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-iv-database
http://docs.sqlalchemy.org/en/latest/
https://flask-sqlalchemy.palletsprojects.com/en/2.x/

