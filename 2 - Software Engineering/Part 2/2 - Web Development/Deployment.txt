Instructions Deploying from the Classroom
Here is the code used in the screencast to get the web app running:

Create a new folder web_app, and move all of the application folders and files to the new folder:
cd 5_deployment/
mkdir web_app
mv -t web_app/ data/ worldbankapp/ worldbank.py  wrangling_scripts/ requirements.txt runtime.txt
[Applicable only for the Local practice. Not for the workspace.] Create a virtual environment and then activate the environment:

# Update Python
conda update python
# Run the following from the Exercise folder
# Create a virtual environment
python3 -m venv worldbankvenv
# Activate the new environment (Mac/Linux)
source worldbankenv/bin/activate
The new environment will automatically come with Python packages meant for data science. In addition, pip install the specific 
Python packages needed for the web app

pip install flask==0.12.5 pandas==0.23.3 plotly==2.0.15 gunicorn==19.10.0
Install the Heroku command-line tools. The classroom workspace already has Heroku installed.

# Verify the installation
heroku --version
# Install, if Heroku not present
curl https://cli-assets.heroku.com/install-ubuntu.sh | sh
For your local installation, you can refer to the official installation instructions. And then log into heroku with the following command

heroku login -i
Heroku asks for your account email address and password, which you type into the terminal and press enter.

The next steps involves some housekeeping:

remove app.run() from worldbank.py
type cd web_app into the Terminal so that you are inside the folder with your web app code.
Create a proc file, which tells Heroku what to do when starting your web app:

touch Procfile
Then open the Procfile and type:

web gunicorn worldbank:app
[Applicable only for the Local practice. Not for the workspace.] Create a requirements.txt file, which lists all of the Python 
packages that your app depends on:
pip freeze > requirements.txt
For workspace users, the requirements.txt is already available in the exercise folder. In addition, we have also provided a runtime.txt 
file in the exercise folder, that declares the exact Python version number to use. Heroku supports these Python runtimes.
Initialize a git repository and make a commit:
# Run it just once, in the beginning
git init
# For the first time commit, you need to configure the git username and email:
git config --global user.email "you@example.com"
git config --global user.name "Your Name"
Whenever you make any changes to your web_app folder contents, you will have to run git add and git commit commands.
# Every time you make any edits to any file in the web_app folder
git add .
# Check which files are ready to be committed
git status
git commit -m "your message"

Now, create a Heroku app:
heroku create my-app-name --buildpack heroku/python
# For example, 
# heroku create sudkul-web-app --buildpack heroku/python

# The output will be like:
# https://sudkul-web-app.herokuapp.com/ | https://git.heroku.com/sudkul-web-app.git

where my-app-name is a unique name that nobody else on Heroku has already used. You can optionally define the build environment 
using the option --buildpack heroku/python The heroku create command should create a git repository on Heroku and a web address for 
accessing your web app. You can check that a remote repository was added to your git repository with the following terminal command:

git remote -v
Before you finally push your local git repository to the remote Heroku repository, you will need the following environment variables 
(kind of secrets) to send along:

# Set any environment variable to pass along with the push
heroku config:set SLUGIFY_USES_TEXT_UNIDECODE=yes
heroku config:set AIRFLOW_GPL_UNIDECODE=yes
# Verify the variables
heroku config

If your code uses any confidential variable value, you can use this approach to send those values secretly. 
These values will not be visible to the public users. Now, push your local repo to the remote Heroku repo:
# Syntax
# git push <remote branch name> <local branch name>
git push heroku master
Other useful commands are:
# Clear the build cache
heroku plugins:install heroku-builds
heroku builds:cache:purge -a <app-name> --confirm <app-name>
# Permanently delete the app
heroku apps:destroy  <app-name> --confirm <app-name>
Now, you can type your web app's address, such as https://sudkul-web-app.herokuapp.com/, in the browser to see the results.

Other Services Besides Heroku
Heroku is just one option of many for deploying a web app, and Heroku is actually owned by Salesforce.com.

The big internet companies offer similar services like Amazon's Lightsail, Microsoft's Azure, Google Cloud, and IBM Cloud 
(formerly IBM Bluemix). However, these services tend to require more configuration. Most of these also come with either a 
free tier or a limited free tier that expires after a certain amount of time.

Virtual Environments vs. Anaconda
Virtual environments and Anaconda serve a very similar purpose.

Anaconda is a distribution of Python (and the analytics language R) specifically for data science. 
Anaconda comes installed with a package and environment manager called conda.

To ensure that your app only installs necessary packages, you should create a virtual Python environment. 
A virtual Python environment is a separate Python installation on your computer that you can easily remove and won't 
interfere with your main Python installation. You can create separate environments using conda. These environments 
automatically come with default Python packages meant for data science. However, there can be additional packages that 
you'd want to install in the new environment.

When deploying a web app to a server, you should only include the necessary packages for running your web app. 
Otherwise, you'd be installing Python packages that you don't need. We have already provided the package list in the 
requirements.txt in the workspace above. However, you can create one yourself using the pip freeze > requirements.txt 
command from the new environment.

Creating a Virtual Environment Locally on Your Computer
You can develop your app using the classroom workspace. If you decide to develop your app locally on your computer, you should set up a virtual environment there as well. Different versions of Python have different ways of setting up virtual environments. The env command allows us to create lightweight virtual environments :

# Optional - Update Python installation
conda update python
# Create a virtual environment
python3 -m venv myenv
# Activate the new environment
source myenv/bin/activate
# The new environment will automatically come with Python packages meant for data science.
On Windows, the command is;

> py -3 -m venv myvenv
> myvenv\Scripts\activate.bat
For more information, read through this link.

Databases for Your App
The web app in this lesson does not need a database. All of the data is stored in CSV files; however, it is 
possible to include a database as part of a Flask app. One common use case would be to store user login information 
such as username and password.

Flask is database agnostic meaning Flask can work with a number of different database types. 
If you are interested in learning about how to include a database as part of a Flask app, here are some resources:

Flask Mega Tutorial
Heroku - Provision a Database
Deployment
In the next part of the lesson, you'll find a workspace where you can practice deploying the world bank web app. 
Set up an account on Heroku and then follow the instructions shown in this part of the lesson.

You'll need to use a different name for the web app since the one used in this lesson is already taken.